searchState.loadedDescShard("group_member_approval_smart_contract", 0, "Group Member Approval Smart Contract\nThe entrypoint for all external commands sent to the …\nAll commands that are available when executing this …\nDefines the contract instantiation process. Contains the …\nDefines the contract migration process. Contains the …\nDefines the contract query process. Contains the …\nContains all internal storage communication functionality. …\nContains all declared structs for internal and external …\nContains helper functionality for contract code …\nThe entry point used when an account initiates an …\nThe entry point used when an account instantiates a stored …\nThe entry point used when the contract admin migrates an …\nThe entry point used when an account invokes the contract …\nThe core functionality of the contract.  Allows a …\nInvoked via the contract’s execution functionality.  …\nThe main functionality executed when the smart contract is …\nThe main functionality executed when the smart contract is …\nThe main entrypoint function for running a code migration.\nThe main entrypoint function for running a code migration. …\nA query that fetches the stored values in the ContractState…\nFetches the current values within the ContractState.\nContains the functionality for interacting with the …\nStores the core contract configurations created on …\nThe bech32 address of the account that has admin rights …\nThe Provenance Name Module fully-qualified name that is …\nA free-form name defining this particular contract …\nThe crate name, used to ensure that newly-migrated …\nThe crate version, used to ensure that newly-migrated …\nReturns the argument unchanged.\nFetches the current contract instance of contract state.  …\nCalls <code>U::from(self)</code>.\nConstructs a new instance of this struct.\nOverwrites the existing singleton contract storage …\nContains all the driving types for base functionality. …\nDefines each custom error that can occur throughout …\nDefines each input msg utilized by contract invocations.\nThe base error enum that is used to wrap any errors that …\nOccurs when an error is encountered during a contract …\nOccurs when an error is encountered during contract …\nAn error that occurs when an invalid text format is …\nOccurs when the account invoking a contract route provides …\nOccurs when an error is encountered during a contract …\nOccurs when the semver library fails an operation.  This …\nOccurs when the Cosmwasm Std library fails an operation.  …\nOccurs when an error is encountered during contract store …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nThe route on which the error occurred.\nA route that allows the signing account to approve its …\nThe standard migration route that modifies ContractState …\nAll defined payloads to be used when executing routes on …\nThe msg that is sent to the chain in order to instantiate …\nAll defined payloads to be used when migrating to a new …\nA route that returns the current ContractState value …\nAll defined payloads to be used when querying routes on …\nThe Provenance Name Module fully-qualified name that is …\nIf true, a new Provenance Name Module name will be bound …\nA free-form name defining this particular contract …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unique identifier of the group for which the signing …\nUtility functions that assist in Provenance Blockchain …\nUtility functions that assist in performing common tasks …\nFetches all attributes for an address, handling paging as …\nParses all group ids from the Provenance Blockchain …\nParses all group ids from the Provenance Blockchain …\nGenerates a name bind msg that will properly assign the …\nVerifies that the provided info does not include and …")